I"(<h1 id="탄막-슈팅-게임-닷지---플레이어-제작2">탄막 슈팅 게임 ‘닷지’ - 플레이어 제작(2)</h1>

<hr />
<h2 id="플레이어-제작">플레이어 제작</h2>

<p><strong>플레이어 사망 처리</strong></p>

<p>이제 플레이어 사망 처리를 할 Die() 메서드를 만들어보자.</p>

<p>Die() 메서드는 자신의 게임 오브젝트를 비활정화하는 메서드이다. 이 메서드는 탄알과 플레이어가 충돌했을 때 실행될것이다.</p>

<p>Die() 메서드는 PlayerController 스크립트가 스스로 실행하지 않는다. 플레이어에게 부딪힌 탄알이 Player Coltroller 스크립트에 접근하여 실행시킬것이며 그러므로 Die() 메서드는 public으로 접근제한자를 설정해 외부에서 접근 가능하도록 구현한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public void Die(){
    //자신의 게임 오브젝트 비활성화
    gameObject.SetActive(false);
}
</code></pre></div></div>

<p>gameObject는 MonoBehaviour 클래스에서 제공하는 게임 오브젝트 자기 자신을 가리키는 ‘변수’이다. 모든 컴포넌트는 gameObject 변수를 사용해 자신을 사용하고 있는 오브젝트(자신, 즉 컴포넌트의 게임 오브젝트)에 접근할 수 있다. PlayerColtroller 스크립트는 Player 오브젝트에 추가할 것이므로 gameObject 변수는 Player 오브젝트를 가리키게 되어 비활성화 처리를 할 수 있다.</p>

<p>GameObject와 gameObject를 혼동하면 안되는데, GameObject는 타입이고 gameObject는 변수이다. 즉,</p>

<p>`
GameObject gameObject;
`</p>

<p>인 것이다.</p>

<p><strong>SetActive() 메서드</strong></p>

<p>모든 게임 오브젝트는 스스로를 끄고 켜는 기능을 가지고 있다. 오브젝트의 Inspector 창에서 게임 오브젝트 이름 왼쪽에 보이는 체크 박스가 게임 오브젝트를 활성화/비활성화 하는 버튼이다.</p>

<p>SetActive() 메서드는 GameObject 타입, 즉 클래스에 내장되어 있는 메서드로서 해당 게임 오브젝트의 활성/비활성화를 담당한다.</p>

<p align="center">
<img width="600" alt="image" src="https://user-images.githubusercontent.com/68016394/153695310-fdb06492-b4e3-4f06-8457-2b1bf89b70a9.png" />
활성/비활성화 하는 체크 박스
</p>

<p>위의 체크박스는 SetActive() 메서드를 활용해 원격으로 이용할 수 있다. 위의 Die() 메서드는 체크박스를 해제해 비활성화 상태로 만든 것이며 SetActive(True)를 통해 다시 활성화시킬 수 있다.</p>

<p><strong>PlayerController 컴포넌트 설정하기</strong></p>

<p>완성한 PlayerController 스크립트를 Player 게임 오브젝트에 컴포넌트로 추가하고 실행해보자.</p>

<p align="center">
<img width="600" alt="image" src="https://user-images.githubusercontent.com/68016394/153698454-7103f08f-3347-4a44-a2d5-6032e5f55acf.png" />
스크립트 파일을 컴포넌트로 추가
</p>

<p>위의 그림처럼 PlayerController 스크립트를 컴포넌트로 추가한 뒤 Player Rigid Body를 Player 오브젝트가 가지고 있던 리지드바디 컴포넌트로 할당해주자.</p>

<p>이 상태에서 씬을 플레이하면 상하좌우에 맞춰 캡슐형태의 플레이어가 움직이는 것을 확인할 수 있다.</p>

<h2 id="playercontroller-스크립트-개선하기">PlayerController 스크립트 개선하기</h2>

<p>이렇게 완성한 PlayerController 스크립트는 몇가지 문제점이 있다.</p>

<ol>
  <li>조작이 게임에 즉시 반영되지 않는다. <br /> AddForce()로 힘을 주는 방식으로 움직임을 구현했기에 즉각적으로 움직이지 않고 가속도가 붙는 방식으로 움직이게 되어 조작감이 답답해진다.</li>
  <li>입력 감지 코드가 복잡하다. <br /> 4개의 if문을 활용한 방식을 좀 더 간결하게 개선해야 할 필요가 있다.</li>
  <li>playerRigidbody에 컴포넌트를 드래그&amp;드롭으로 할당하는 것이 불편하다.</li>
</ol>
:ET